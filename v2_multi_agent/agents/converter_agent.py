from semantic_kernel.agents import ChatCompletionAgent
from semantic_kernel.connectors.ai.open_ai import AzureChatCompletion
from semantic_kernel import Kernel
from config.settings import get_settings
from config.logging import get_logger
from plugins.filesystem_plugin import FileSystemPlugin
from plugins.terraform_plugin import TerraformPlugin
import json


class ConverterAgent:
    """
    Converter Agent - Code transformation specialist.
    
    Responsibilities:
    - Transform azurerm_* resources to AVM module calls
    - Update variables.tf and outputs.tf
    - Preserve comments and structure
    - Generate converted files
    """
    
    def __init__(self):
        self.logger = get_logger(__name__)
        self.settings = get_settings()
        self.agent = None
        self.conversion_plan = None  # Holds the provided conversion plan
        
    async def initialize(self, conversion_plan):
        """
        Initialize the agent with Azure OpenAI service, plugins, and a conversion plan.
        conversion_plan: dict | str - authoritative plan generated by a previous agent.
        """
        self.conversion_plan = conversion_plan
        try:
            # Create kernel and add services
            kernel = Kernel()
            
            chat_completion_service = AzureChatCompletion(
                deployment_name=self.settings.azure_openai_deployment_name,
                api_key=self.settings.azure_openai_api_key,
                endpoint=self.settings.azure_openai_endpoint,
                api_version=self.settings.azure_openai_api_version,
            )
            
            kernel.add_service(chat_completion_service)
            
            # Initialize plugins
            filesystem_plugin = FileSystemPlugin(self.settings.base_path)
            terraform_plugin = TerraformPlugin()
            
            plan_text = (
                self.conversion_plan
                if isinstance(self.conversion_plan, str)
                else json.dumps(self.conversion_plan, indent=2)
            )

            # Create the agent
            self.agent = ChatCompletionAgent(
                service=chat_completion_service,
                kernel=kernel,
                name="ConverterAgent",
                description="A specialist agent that converts Terraform resources to Azure Verified Modules.",
                plugins=[filesystem_plugin, terraform_plugin],
                instructions=f"""You are the Converter Agent for Terraform to Azure Verified Modules (AVM) conversion.

Your responsibilities:
1. Transform mapped azurerm_* resources into AVM module calls
2. Update variables.tf to include required AVM module inputs
3. Update outputs.tf to maintain compatibility with original resource outputs
4. Preserve code structure, comments, and formatting where possible
5. Generate all converted Terraform files

Authoritative Conversion Plan (follow this precisely; it overrides generic guidance if conflicts arise):
{plan_text}

Operational Process:
1. Use ONLY the resources and mappings declared in the conversion plan.
2. For each resource in plan.mappings:
   - Replace resource blocks with AVM module blocks (source, version from plan).
   - Map attributes exactly as specified.
   - Insert conversion comment header.
3. Update variables.tf and outputs.tf per plan.required_variables and plan.required_outputs.
4. Preserve and annotate unmapped resources as described.
5. Write converted files to output/{{timestamp}}/migrated/ maintaining structure.
6. Generate avm-mapping.json containing mapping + any deviations.
7. Summarize statistics: counts (converted, skipped, unmapped), new variables, new outputs.

Available tools:
- read_tf_files
- write_file
- parse_terraform_file
- create_directory

Completion Requirement:
When EVERYTHING (files + mapping + summary) is done, conclude with EXACTLY:
"Conversion complete. Transferring to Validator Agent to validate the converted files."

Never ask for clarifications; proceed autonomously."""
            )
            
            self.logger.info("Converter Agent initialized successfully with conversion plan")
            return self.agent
            
        except Exception as e:
            self.logger.error(f"Failed to initialize Converter Agent: {e}")
            raise

    async def run_conversion(self):
        """
        Kick off autonomous conversion using the initialized agent and injected plan.
        Returns the final agent response.
        """
        if not self.agent:
            raise RuntimeError("Agent not initialized. Call initialize(conversion_plan) first.")
        kickoff_message = (
            "Begin conversion now using the injected conversion plan. "
            "Produce all converted Terraform files, variables.tf, outputs.tf, avm-mapping.json, "
            "and a summary. Finish with the required handoff statement exactly."
        )
        try:
            # NOTE: Adjust method name if your ChatCompletionAgent exposes a different execution API.
            return await self.agent.complete_chat(kickoff_message)
        except Exception as e:
            self.logger.error(f"Conversion execution failed: {e}")
            raise