{
  "module": {
    "name": "avm-res-network-virtualnetwork",
    "display_name": "Azure Virtual Network (VNet) Resource Module",
    "version": "0.14.1",
    "description": "Terraform Azure Verified Resource Module for Virtual Network. Manage Azure Virtual Networks, Subnets, and Peerings, with optional IP Address Management (IPAM) via Azure Virtual Network Manager. Supports creation and management of VNets, subnets, peerings, DNS, DDoS protection, network security groups, route tables, service endpoints, and delegations. Highly customizable and supports advanced IPAM features.",
    "terraform_registry_url": "https://registry.terraform.io/modules/Azure/avm-res-network-virtualnetwork/azurerm/0.14.1",
    "source_code_url": "https://github.com/Azure/terraform-azurerm-avm-res-network-virtualnetwork",
    "resources": [
      "azapi_resource.vnet",
      "azurerm_management_lock.this",
      "azurerm_monitor_diagnostic_setting.this",
      "azurerm_role_assignment.vnet_level",
      "modtm_telemetry.telemetry",
      "random_uuid.telemetry",
      "azapi_client_config.telemetry",
      "modtm_module_source.telemetry"
    ],
    "inputs": [
      {
        "name": "lock",
        "type": "object({ kind = string; name = optional(string, null) })",
        "required": false
      },
      {
        "name": "parent_id",
        "type": "string",
        "required": true
      },
      {
        "name": "address_space",
        "type": "set(string)",
        "required": false
      },
      {
        "name": "bgp_community",
        "type": "string",
        "required": false
      },
      {
        "name": "dns_servers",
        "type": "object({ dns_servers = list(string) })",
        "required": false
      },
      {
        "name": "tags",
        "type": "map(string)",
        "required": false
      },
      {
        "name": "enable_vm_protection",
        "type": "bool",
        "required": false
      },
      {
        "name": "encryption",
        "type": "object({ enabled = bool; enforcement = string })",
        "required": false
      },
      {
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "name": "subnets",
        "type": "map(object({ address_prefix = optional(string); address_prefixes = optional(list(string)); name = string; ipam_pools = optional(list(object({ pool_id = string; prefix_length = optional(number); allocation_type = optional(string, \"Static\") }))); nat_gateway = optional(object({ id = string })); network_security_group = optional(object({ id = string })); private_endpoint_network_policies = optional(string, \"Enabled\"); private_link_service_network_policies_enabled = optional(bool, true); route_table = optional(object({ id = string })); service_endpoint_policies = optional(map(object({ id = string }))); service_endpoints = optional(list(string)); service_endpoints_with_location = optional(list(object({ service = string; locations = optional(list(string), [\"*\"]) }))); default_outbound_access_enabled = optional(bool, false); sharing_scope = optional(string, null); delegations = optional(list(object({ name = string; service_delegation = object({ name = string }) }))); timeouts = optional(object({ create = optional(string, \"30m\"); read = optional(string, \"5m\"); update = optional(string, \"30m\"); delete = optional(string, \"30m\") }), {}); retry = optional(object({ error_message_regex = optional(list(string), [\"ReferencedResourceNotProvisioned\"]); interval_seconds = optional(number, 10); max_interval_seconds = optional(number, 180) }), {}); role_assignments = optional(map(object({ role_definition_id_or_name = string; principal_id = string; description = optional(string, null); skip_service_principal_aad_check = optional(bool, false); condition = optional(string, null); condition_version = optional(string, null); delegated_managed_identity_resource_id = optional(string, null); principal_type = optional(string, null) }))) }))",
        "required": false
      },
      {
        "name": "location",
        "type": "string",
        "required": true
      },
      {
        "name": "enable_telemetry",
        "type": "bool",
        "required": false
      },
      {
        "name": "extended_location",
        "type": "object({ name = string; type = string })",
        "required": false
      },
      {
        "name": "peerings",
        "type": "map(object({ name = string; remote_virtual_network_resource_id = string; allow_forwarded_traffic = optional(bool, false); allow_gateway_transit = optional(bool, false); allow_virtual_network_access = optional(bool, true); do_not_verify_remote_gateways = optional(bool, false); enable_only_ipv6_peering = optional(bool, false); peer_complete_vnets = optional(bool, true); local_peered_address_spaces = optional(list(object({ address_prefix = string }))); remote_peered_address_spaces = optional(list(object({ address_prefix = string }))); local_peered_subnets = optional(list(object({ subnet_name = string }))); remote_peered_subnets = optional(list(object({ subnet_name = string }))); use_remote_gateways = optional(bool, false); create_reverse_peering = optional(bool, false); reverse_name = optional(string); reverse_allow_forwarded_traffic = optional(bool, false); reverse_allow_gateway_transit = optional(bool, false); reverse_allow_virtual_network_access = optional(bool, true); reverse_do_not_verify_remote_gateways = optional(bool, false); reverse_enable_only_ipv6_peering = optional(bool, false); reverse_peer_complete_vnets = optional(bool, true); reverse_local_peered_address_spaces = optional(list(object({ address_prefix = string }))); reverse_remote_peered_address_spaces = optional(list(object({ address_prefix = string }))); reverse_local_peered_subnets = optional(list(object({ subnet_name = string }))); reverse_remote_peered_subnets = optional(list(object({ subnet_name = string }))); reverse_use_remote_gateways = optional(bool, false); sync_remote_address_space_enabled = optional(bool, false); sync_remote_address_space_triggers = optional(any, null); timeouts = optional(object({ create = optional(string, \"30m\"); read = optional(string, \"5m\"); update = optional(string, \"30m\"); delete = optional(string, \"30m\") }), {}); retry = optional(object({ error_message_regex = optional(list(string), [\"ReferencedResourceNotProvisioned\"]); interval_seconds = optional(number, 10); max_interval_seconds = optional(number, 180) }), {}) }))",
        "required": false
      },
      {
        "name": "retry",
        "type": "object({ error_message_regex = optional(list(string), [\"ReferencedResourceNotProvisioned\"]); interval_seconds = optional(number, 10); max_interval_seconds = optional(number, 180) })",
        "required": false
      },
      {
        "name": "role_assignments",
        "type": "map(object({ role_definition_id_or_name = string; principal_id = string; description = optional(string, null); skip_service_principal_aad_check = optional(bool, false); condition = optional(string, null); condition_version = optional(string, null); delegated_managed_identity_resource_id = optional(string, null); principal_type = optional(string, null) }))",
        "required": false
      },
      {
        "name": "timeouts",
        "type": "object({ create = optional(string, \"30m\"); read = optional(string, \"5m\"); update = optional(string, \"30m\"); delete = optional(string, \"30m\") })",
        "required": false
      },
      {
        "name": "ddos_protection_plan",
        "type": "object({ id = string; enable = bool })",
        "required": false
      },
      {
        "name": "diagnostic_settings",
        "type": "map(object({ name = optional(string, null); log_categories = optional(set(string), []); log_groups = optional(set(string), [\"allLogs\"]); metric_categories = optional(set(string), [\"AllMetrics\"]); log_analytics_destination_type = optional(string, \"Dedicated\"); workspace_resource_id = optional(string, null); storage_account_resource_id = optional(string, null); event_hub_authorization_rule_resource_id = optional(string, null); event_hub_name = optional(string, null); marketplace_partner_resource_id = optional(string, null) }))",
        "required": false
      },
      {
        "name": "flow_timeout_in_minutes",
        "type": "number",
        "required": false
      },
      {
        "name": "ipam_pools",
        "type": "list(object({ id = string; prefix_length = number }))",
        "required": false
      }
    ],
    "outputs": [
      {
        "name": "address_spaces",
        "description": "The address spaces of the virtual network.",
        "sensitive": false
      },
      {
        "name": "name",
        "description": "The resource name of the virtual network.",
        "sensitive": false
      },
      {
        "name": "peerings",
        "description": "Information about the peerings created in the module. Please refer to the peering module documentation for details of the outputs",
        "sensitive": false
      },
      {
        "name": "resource",
        "description": "The Azure Virtual Network resource.  This will be null if an existing vnet is supplied.",
        "sensitive": false
      },
      {
        "name": "resource_id",
        "description": "The resource ID of the virtual network.",
        "sensitive": false
      },
      {
        "name": "subnets",
        "description": "Information about the subnets created in the module. Please refer to the subnet module documentation for details of the outputs",
        "sensitive": false
      }
    ]
  }
}